// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// Changed to SQLite for simplicity
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?   // Add password field for credentials provider
  image         String?
  accounts      Account[]
  sessions      Session[]
  userProfile   UserProfile?  // One-to-one relation with our custom UserProfile model
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Our custom UserProfile model for medical data
model UserProfile {
  id             String    @id @default(cuid())
  userId         String    @unique
  medicalHistory String?   // User's medical history
  drugHistory    String?   // User's drug history
  allergies      String?   // User's allergies
  bloodType      String?   // Blood type (A+, B-, etc.)
  height         Float?    // Height in cm
  weight         Float?    // Weight in kg
  dateOfBirth    DateTime? // Date of birth
  gender         String?   // Gender
  emergencyContact String? // Emergency contact info
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
