// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output        = "../node_modules/.prisma/client"
}

// PostgreSQL database on Neon
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?   // Add password field for credentials provider
  image         String?
  accounts      Account[]
  sessions      Session[]
  userProfile   UserProfile?  // One-to-one relation with our custom UserProfile model
  chatMessages  ChatMessage[] // One-to-many relation with ChatMessage model
  appointments  Appointment[] // One-to-many relation with Appointment model
  laboratoryData LaboratoryData[] // One-to-many relation with LaboratoryData model
  pillReminders PillReminder[] // One-to-many relation with PillReminder model
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Our custom UserProfile model for medical data
model UserProfile {
  id             String    @id @default(cuid())
  userId         String    @unique
  medicalHistory String?   // User's medical history
  drugHistory    String?   // User's drug history
  allergies      String?   // User's allergies
  bloodType      String?   // Blood type (A+, B-, etc.)
  height         Float?    // Height in cm
  weight         Float?    // Weight in kg
  dateOfBirth    DateTime? // Date of birth
  gender         String?   // Gender
  emergencyContact String? // Emergency contact info
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Chat message model to store chat history
model ChatMessage {
  id        String   @id @default(cuid())
  text      String   // Message content
  sender    String   // 'user' or 'bot'
  userId    String?  // Optional: can be null for anonymous users
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversationId String  // To group messages into conversations
  metadata   String?  // JSON string for additional data like lab results
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([conversationId])
}

// Appointment model for doctor appointments
model Appointment {
  id            String   @id @default(cuid())
  title         String   // Title/purpose of the appointment
  doctorName    String   // Name of the doctor
  speciality    String?  // Doctor's speciality (optional)
  location      String?  // Location of the appointment (optional)
  notes         String?  // Additional notes
  dateTime      DateTime // Date and time of the appointment
  duration      Int      // Duration in minutes
  reminderSent  Boolean  @default(false) // Whether a reminder has been sent
  reminded      DateTime? // When the reminder was sent
  
  // Reminder settings
  remindBefore  Int      @default(24) // Hours before appointment to send reminder
  
  // Status: 'scheduled', 'completed', 'cancelled', 'missed'
  status        String   @default("scheduled")
  
  // Link to user
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@index([dateTime])
}

// PillReminder model for medication reminders
model PillReminder {
  id            String   @id @default(cuid())
  name          String   // Medication name
  dosage        String   // Dosage (e.g., "10mg", "1 pill")
  frequency     String   // How often to take (e.g., "daily", "twice daily", "weekly")
  times         String   // JSON string containing times of day to take pill (e.g., ["08:00", "20:00"])
  startDate     DateTime // When to start taking medication
  endDate       DateTime? // When to stop taking medication (optional for ongoing medications)
  withFood      Boolean  @default(false) // Whether medication should be taken with food
  notes         String?  // Additional instructions or notes
  reminderSent  Boolean  @default(false) // Whether reminder has been sent for current interval
  reminded      DateTime? // When the last reminder was sent
  
  // Reminder settings
  remindBefore  Int      @default(15) // Minutes before scheduled time to send reminder
  
  // Status: 'active', 'completed', 'paused', 'cancelled'
  status        String   @default("active")
  
  // Link to user
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@index([startDate])
  @@index([status])
}

// Laboratory data model to store test results
model LaboratoryData {
  id          String   @id @default(cuid())
  userId      String
  testName    String   // Name of the test
  testDate    DateTime // Date when the test was conducted
  result      String   // Test result value
  unit        String?  // Unit of measurement
  normalRange String?  // Normal range for the test
  notes       String?  // Additional notes or observations
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Link to user
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([testDate])
}
